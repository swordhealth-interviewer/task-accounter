// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	usecases "github.com/uiansol/task-accounter.git/internal/domain/usecases"
)

// TaskCreateUseCaseInterface is an autogenerated mock type for the TaskCreateUseCaseInterface type
type TaskCreateUseCaseInterface struct {
	mock.Mock
}

// Execute provides a mock function with given fields: input
func (_m *TaskCreateUseCaseInterface) Execute(input usecases.TaskCreateInput) (usecases.TaskCreateOutput, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 usecases.TaskCreateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(usecases.TaskCreateInput) (usecases.TaskCreateOutput, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(usecases.TaskCreateInput) usecases.TaskCreateOutput); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(usecases.TaskCreateOutput)
	}

	if rf, ok := ret.Get(1).(func(usecases.TaskCreateInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskCreateUseCaseInterface creates a new instance of TaskCreateUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskCreateUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskCreateUseCaseInterface {
	mock := &TaskCreateUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
