// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entities "github.com/uiansol/task-accounter.git/internal/domain/entities"
)

// TaskRepositoryInterface is an autogenerated mock type for the TaskRepositoryInterface type
type TaskRepositoryInterface struct {
	mock.Mock
}

// FindAll provides a mock function with given fields:
func (_m *TaskRepositoryInterface) FindAll() ([]*entities.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*entities.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *TaskRepositoryInterface) FindByID(id string) (*entities.Task, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entities.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Task, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Task); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: userID
func (_m *TaskRepositoryInterface) FindByUserID(userID string) ([]*entities.Task, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 []*entities.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entities.Task, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*entities.Task); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: task
func (_m *TaskRepositoryInterface) Save(task entities.Task) (*entities.Task, error) {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *entities.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Task) (*entities.Task, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(entities.Task) *entities.Task); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskRepositoryInterface creates a new instance of TaskRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepositoryInterface {
	mock := &TaskRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
